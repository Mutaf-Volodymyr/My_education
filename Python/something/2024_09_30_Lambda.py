# 1. Дано предложение из слов, разделенных пробелами.
# Написать функцию transform(), которая принимает такое предложение и возвращает аналогичное,
# но где все слова длины 3 в этом предложении - заглавными буквами.
# Пример: “The quick brown fox jumps over the lazy dog” -> “THE quick brown FOX jumps over THE lazy
# DOG”.

# def transform(a:str):
#     return ' '.join([i.upper() if len(i) == 3 else i for i in a.split()])
# print(transform('The quick brown fox jumps over the lazy dog'))

# 2 Напишите программу, которая сортирует список строк по длине строк с использованием
# метода sort(). Если строки имеют одинаковую длину, то они должны быть упорядочены в
# лексикографическом порядке. Программа должна выводить промежуточные этапы сортировки
# и итоговый отсортированный список.
# Пример вывода:
# Введите список строк, разделенных пробелами: apple pear banana cat dog
# Исходный список: ['apple', 'pear', 'banana', 'cat', 'dog']
# Отсортированный список: ['cat', 'dog', 'pear', 'apple', 'banana']

# a = ['apple', 'pear', 'banana', 'cat', 'dog']
# a.sort(key=lambda x: (len(x), x))
# print(a)


# 2. Изменим условие 1 задачи: нужно, чтобы функция из примера 1 могла также менять слова
# длины 4 на написанные маленькими буквами.
# В общем виде, нужно, чтобы функции можно было дать условие, которому соответствует
# указанное действие.
# Например, все слова длины 4 хотим заменить на звездочки. А слова длины 2 - на черточки.
# Каждое выполнение функции - одно условие и одно действие.
#
# def transform(a:str, b:dict) ->str:
#     a = a.split()
#     for k, v in b.items():
#         a = [v(i) if len(i) == k else i for i in a]
#     return ' '.join(a)
#
# my_dict = {
#     3: str.upper,
#     4: lambda x:len(x) * '*',
#     5: lambda x: x[::-1]
# }
#
# print(transform('The quick brown fox jumps over the lazy dog', my_dict))


# Практическое задание 1
# Считать данные из файла, где записаны разделенные табуляцией фамилия, имя, год рождения,
# курс и средний балл.
# Реализовать функцию, которая будет выдавать эти данные, отсортированные по полю, которое
# задается в аргументах функции.
# Интерфейс продумайте сами, например, придумайте, как сортировать по нескольким полям,
# чтобы это было интуитивно понятно и программа корректно обрабатывала такой кейс.

# def my_function(file_name, n:int):
#     with open(file_name, 'r', encoding='utf-8') as file:
#         res = sorted([[int(j) if j.isdigit() else j for j in i.split()] for i in file], key=lambda x: x[n])
#         return res
#
# print(*my_function('names.txt', 3), sep='\n')









