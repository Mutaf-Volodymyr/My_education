# from collections import defaultdict
# fish_inventory = [
#     ("Sammy", "shark", "tank-a"),
#     ("Jimmy", "shark", "tank-a"),
#     ("Marry", "squid", "tank-a"),
#     ("Jamie", "cuttlefish", "tank-b"),
#     ("Mary", "squid", "tank-a"),
#     ("lili", "squid", "tank-b"),
#     ]
# res = defaultdict(list)
# for n, k, r in fish_inventory:
#     res[r].append((n,k))
#
# print(res)


# 1. Словарь синонимов. Вам дан словарь, состоящий из пар слов. Каждое слово является
# синонимом к парному ему слову. Все слова в словаре различны. Написать функцию, которая для
# заданного слова из словаря, определяет его синоним. Пример словаря:


# array = {'Hello': 'Hi',
#          'Bye': 'Goodbye',
#          'List': 'Array'}
#
# def get_synonim(sinonim):
#     for k, v in array.items():
#         if sinonim == k:
#             return v
#         elif sinonim == v:
#             return k
#     return None
#
# print(get_synonim('Hello'))


# 2. Дан список стран и городов каждой страны. Затем даны названия городов. Для каждого города
# укажите, в какой стране он находится. Пример словаря:

# dict3 = {'Germany': 'Berlin Hamburg Munich Leipzig',
#     'Ukraine': 'Kiev Donetsk Odessa'}
# def which_country(Munich):
#     pass




# Практическое задание 1
# Дана строка.
# Посчитайте в ней частоту встречаемости всех букв. Считаем, что в строке могут быть
# пробельные символы.

# from collections import Counter
# from string import punctuation
#
# strin = ''.join(input().lower().split())
# for i in punctuation:
#     strin = strin.replace(i, '')
#
# print(Counter(strin))


# Практическое задание 2
# Дан текст.
# Необходимо посчитать сколько раз встретилось каждое слово и вывести в топ слов,
# упорядоченный сначала по убыванию встречаемости, а при равенстве частот в соответствии с
# упорядочиванием в лексикографическом порядке.
# Решить задачу с помощью использования изученных классов.

# from collections import Counter
# from string import punctuation
# string = '''Господа, новая модель организационной деятельности играет определяющее значение для
# существующих финансовых и административных
#  условий. Таким образом, выбранный нами инновационный путь, а также свежий взгляд на привычные вещи — безусловно открывает новые горизонты
#   для как самодостаточных, так и внешне зависимых концептуальных решений. Имеется спорная точка зрения, гласящая примерно следующее: ключевые особенности
#    структуры проекта неоднозначны и будут подвергнуты целой серии независимых исследований.'''
# text = [i.strip(punctuation) for i in string.lower().split()]
# res = Counter(text)
# print(sorted(res.most_common(3), key=lambda x: (-x[1], x[0]))



# Есть файл с данными о пассажирах Титаника.
# Выведите общее количество пассажиров, представленных в данных.

# Из этого же файла нужно забрать информацию:
# 1) Количество всех пассажиров
# 2) Количество выживших и их имена
# 3) Количество умерших пассажиров и их имена.
# 4) Найти самого пожилого пассажира. Вывести его имя, возраст и класс каюты.
# 5) Выведите список имен всех пассажиров, чей возраст в диапазоне от 20 до 50 лет
# и класс пассажира - 2-ой.
# 6) Найти средний возраст пассажиров в зависимости от класса билетов.
# 7) Определить процент выживших мужчин, женщин и детей (ребёнком
# считается пассажир до 15-ти лет включительно)
# 8)Распределить всех пассажиров по портам посадки:
# Значения могут быть:
# "S" (Southampton),
# "C" (Cherbourg)
# "Q" (Queenstown)

# Этих пассажиров распределить по:
# мужчинам
# женщинам
# детям (до 15 лет включительно)

# Выходные данные записать в новый json файл




import json

with open('titanic_data.json', 'r', encoding='utf-8') as file:
    data = json.load(file)
    survived1 = filter(lambda x:['Survived'] == 1,data)
    survived0 = filter(lambda x:['Survived'] == 0,data)
    alter = max(data,key=lambda x:x['Age'] if type(x['Age']) == int else 0)


















