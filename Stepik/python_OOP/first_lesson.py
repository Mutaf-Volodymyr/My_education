# Будем считать, что игровое поле для игры в дартс представляет собой квадратную матрицу,
# заполненную натуральными числами, расположенными в порядке возрастания от краев к центру.
# Стороной игрового поля будем называть сторону квадратной матрицы, которую представляет это поле.
#
# Напишите программу, которая создает поле для игры в дартс определенного размера.

# n = 5 #int(input())
# mx = n // 2
# matrix = [[0] * n for _ in range(n)]
#
# for i in range(n):
#     for j in range(n):
#         x = i + 1
#         matrix[i][j] = x
# for row in matrix:
#     print(*row)


# Назовем скобочной последовательностью строку, состоящую из символов ( и ). Будем считать скобочную последовательность правильной, если:
#
# для каждой открывающей скобки есть закрывающая скобка
# скобки закрываются в правильном порядке, то есть в каждой паре из открывающей и закрывающей скобок открывающая находится левее
# Напишите программу, которая определяет, является ли скобочная последовательность правильной.

#
# s = input()
# for i in range(len(s) // 2):
#     s = s.replace('()', '')
#
# print(False if s else True)



# ртур владеет небольшой коллекцией карточек с покемонами, среди которых встречаются дубликаты. Он хочет оставить по одной карточке каждого типа, а остальные продать.
#
# Напишите программу, которая определяет, сколько дубликатов из своей коллекции Артур может продать.
# from sys import stdin
# a = [i.strip() for i in stdin]
# print(a)
# print(len(a) - len(set(a)))



# Реализуйте декоратор @jsonify, преобразующий возвращаемое значение декорируемой функции в строку формата JSON.
#
# Также декоратор должен сохранять имя и строку документации декорируемой функции.
import functools
import json

def jsonify(*args, **kwargs):
    def decorator(*args, **kwargs):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            res = func(*args, **kwargs)
            return json.dumps(res)
        return wrapper
    return decorator


@jsonify
def make_str(s1, s2):
    return (s1 + s2) * 5


print(make_str('bee', 'geek'))