
# Вам доступна программа, которая находит сумму всех значений по ключу
# Likes из всех словарей списка blog_posts. Если словарь не содержит ключа Likes,
# его значение считается равным минус единице. Дополните приведенный ниже код конструкцией
# try-except, чтобы он выполнился без ошибок.


# blog_posts = [{'Photos': 3, 'Likes': 21, 'Comments': 2},
#               {'Likes': 13, 'Comments': 2, 'Shares': 1},
#               {'Photos': 5, 'Likes': 33, 'Comments': 8, 'Shares': 3},
#               {'Comments': 4, 'Shares': 2},
#               {'Photos': 8, 'Comments': 1, 'Shares': 1},
#               {'Photos': 3, 'Likes': 19, 'Comments': 3}]
# total_likes = 0
# for post in blog_posts:
#     try:
#         total_likes += post['Likes']
#     except KeyError:
#         total_likes -= 1
# print(total_likes)

###############################################################
# Вам доступна программа, которая добавляет в список fifth пятую букву каждого
# слова из списка food. Если слово не имеет пятой буквы, этой буквой считается
# символ _. Дополните приведенный ниже код конструкцией try-except, чтобы он выполнился без ошибок.
# food = ['chocolate', 'chicken', 'corn', 'sandwich', 'soup', 'potatoes', 'beef', 'lox', 'lemonade']
# fifth = []
#
# for x in food:
#     try:
#         fifth.append(x[4])
#     except IndexError:
#         fifth.append('_')
# print(fifth)


###############################################################
# Вам доступна программа, которая добавляет в список remainders остаток от деления
# 36 на каждое число из списка numbers. Если число равно нулю, оно игнорируется.
# Дополните приведенный ниже код конструкцией try-except, чтобы он выполнился без ошибок.

# numbers = [6, 0, 36, 8, 2, 36, 0, 12, 60, 0, 45, 0, 3, 23]
# remainders = []
#
# for number in numbers:
#     try:
#         remainders.append(36 % number)
#     except ZeroDivisionError:
#         pass
#
# print(remainders)

###############################################################
# На вход программе подается неопределенное количество строк, каждая из которых
# содержит произвольное значение. Напишите программу с использованием конструкции
# try-except, которая выводит сумму всех введенных чисел, а затем —
# количество введенных нечисловых значений.

# from sys import stdin
# total = 0
# count = 0
# for num in stdin:
#     try:
#         total += float(num)
#     except ValueError:
#         count += 1
#
# print(int(total) if int(total) == total else total)
# print(count)



###############################################################
# Напишите программу с использованием конструкции try-except, которая выводит название месяца,
# соответствующее введенному целому числу (от 1 до 12 включительно), причем если введенное число не принадлежит отрезку
# [1;12], программа должна вывести текст:
# Введено число из недопустимого диапазона
# если введенное значение не является целым числом, программа должна вывести текст:
# Введено некорректное значение

# import calendar
# months = dict(zip(list(range(1, 13)), list(calendar.month_name)[1:]))
# try:
#     m = int(input())
#     try:
#         print(months[m])
#     except KeyError:
#         print('Введено число из недопустимого диапазона')
# except ValueError:
#     print("Введено некорректное значение")


###############################################################
# Реализуйте функцию add_to_list_in_dict() с использованием конструкции try-except, которая принимает три аргумента в следующем порядке:
    # data — словарь списков, то есть словарь, значениями в котором являются списки
    # key — хешируемый объект
    # element — произвольный объект
# Функция должна добавлять объект element в список по ключу key в словаре data. Если ключа key в словаре data нет,
# функция должна добавить его в словарь, присвоить ему в качестве значения пустой список и добавить в этот список объект element.

# def add_to_list_in_dict(data, key, element):
#     try:
#         data[key].append(element)
#     except KeyError:
#         data[key] = [element]


###############################################################
# Напишите программу с использованием конструкции try-except, которая принимает
# на вход название текстового файла и выводит его содержимое. Если файла
# с данным названием нет в папке с программой, программа должна вывести текст:
# Файл не найден


# try:
#     with open(input(), 'r', encoding='utf-8') as file:
#         print(file.read())
# except FileNotFoundError:
#     print('Файл не найден')

###############################################################


x = 123
y = 456
z = 789
result = (x * y) + z - 54_510
print(result)



